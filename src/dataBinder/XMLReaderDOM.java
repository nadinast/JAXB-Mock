package dataBinder;

import java.io.*;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;

//imports for JAXP - DOM
import javax.xml.parsers.*;

import org.xml.sax.*;
import org.w3c.dom.*;

// imposts for XML transform
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

public class XMLReaderDOM {

    static final String JAXP_SCHEMA_LANGUAGE =
            "http://java.sun.com/xml/jaxp/properties/schemaLanguage";
    static final String W3C_XML_SCHEMA =
            "http://www.w3.org/2001/XMLSchema";


    private void addDot(int x, int y) {
        System.out.println("dot: " + x + ", " + y);
    }

    private Document loadXML(File file) {

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setValidating(true);
        factory.setNamespaceAware(true);
        factory.setAttribute(JAXP_SCHEMA_LANGUAGE, W3C_XML_SCHEMA);

        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.parse(file);
            return document;

        } catch (SAXParseException spe) {
            // Error generated by the parser
            System.out.println("\n** Parsing error" + ", line " + spe.getLineNumber() + ", uri ");
            System.out.println("   " + spe.getMessage());

            // Use the contained exception, if any
            Exception x = spe;

            if (spe.getException() != null) {
                x = spe.getException();
            }

            x.printStackTrace();
        } catch (SAXException sxe) {
            // Error generated during parsing)
            Exception x = sxe;

            if (sxe.getException() != null) {
                x = sxe.getException();
            }

            x.printStackTrace();
        } catch (ParserConfigurationException | IOException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();
        }
        return null;
    }

    private void traversal (Element element) {
        NodeList children = element.getElementsByTagName("*");
        if (children == null)
            System.out.println("Finished parsing");
        else {
            for (int i = 0; i < children.getLength(); i++) {
                Element el = (Element) children.item(i);
                ArrayList<Object> objects = new ArrayList<>();
                if (element.getNodeType() == Node.ELEMENT_NODE) {
                    String name = el.getTagName();
                    String className = name.substring(0, 1).toUpperCase() + name.substring(1, name.length());
                    try {
                        try {
                            objects.add(Class.forName("generatedClasses." + className).newInstance());
                        } catch (InstantiationException | IllegalAccessException e) {
                            e.printStackTrace();
                        }
                        NamedNodeMap attributes = el.getAttributes();
                        for (int j = 0; j < attributes.getLength(); j++){
                            Node attr = attributes.item(j);
                            Method[] methods = Class.forName("generatedClasses." +className).getDeclaredMethods();
                            for(Method m : methods)
                                if(m.getName().equals("set" + attr.getNodeName())) {
                                    //Object[] args= new Object[];
                                    m.invoke(objects.get(i), attr.getNodeValue());
                                }
                        }
                    } catch (ClassNotFoundException | IllegalAccessException | InvocationTargetException e) {
                        e.printStackTrace();
                    }
                    traversal(el);
                }
            }
        }
    }

    private void traversal(Document doc) {
        Element root = doc.getDocumentElement();
        System.out.println(root.getTagName());
        String rootName = root.getNodeName();
        String rootClassName = rootName.substring(0, 1).toUpperCase() + rootName.substring(1, rootName.length());
        traversal(root);
    }

    private Document modify(Document doc) {
        Element root = doc.getDocumentElement();

        // Create a new dot node
        Element elem = doc.createElement("dot");

        // Append node to root
        root.appendChild(elem);

        // Set the attribute/value bindings in a node.
        elem.setAttribute("x", "12");
        elem.setAttribute("y", "34");

        return doc;
    }

    private void saveXML(File file, Document doc) {

        try {
            TransformerFactory tranFact = TransformerFactory.newInstance();
            Transformer tran = tranFact.newTransformer();
            DOMSource DSource = new DOMSource(doc);
            StreamResult SResult = new StreamResult(new FileOutputStream(file)); //new StreamResult(System.out);
            tran.transform(DSource, SResult);
        } catch (TransformerConfigurationException tce) {
            // Error generated by the parser
            System.out.println("\n** Transformer Factory error");
            System.out.println("   " + tce.getMessage());

            // Use the contained exception, if any
            Throwable x = tce;

            if (tce.getException() != null) {
                x = tce.getException();
            }

            x.printStackTrace();
        } catch (TransformerException te) {
            // Error generated by the parser
            System.out.println("\n** Transformation error");
            System.out.println("   " + te.getMessage());

            // Use the contained exception, if any
            Throwable x = te;

            if (te.getException() != null) {
                x = te.getException();
            }

            x.printStackTrace();
        } catch (IOException ioe) {
            // I/O error
            ioe.printStackTrace();
        }
    }

    public static void main(String[] args) {
        XMLReaderDOM xmlReaderDOM = new XMLReaderDOM();

        Document doc = xmlReaderDOM.loadXML(new File("dots.xml"));

        xmlReaderDOM.traversal(doc);

        // Modify the document in memory by adding a new dot element
        //xmlReaderDOM.modify(doc);

        // Saving the modified document to XML
        //xmlReaderDOM.saveXML(new File("copie.xml"), doc);
    }
}
