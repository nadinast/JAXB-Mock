package bindingCompiler;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.helpers.DefaultHandler;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;

public class XSDReader extends DefaultHandler {

    private String className;
    private HashMap<String, String> fields = new HashMap<>();
    private FileGenerator fileGenerator = new FileGenerator();
    private boolean sequence = false;

    public void startDocument() throws SAXException {
        System.out.println("startDocument");
    }

    public void endDocument() throws SAXException {
        System.out.println("endDocument");
    }

    public void startElement(String namespaceURI, String localName,
                             String qName, Attributes atts) throws SAXException {
        System.out.println("start element: " + qName);
        switch (qName) {
            case "xs:element":
                String elementName = atts.getValue("name");
                className = elementName.substring(0, 1).toUpperCase() + elementName.substring(1, elementName.length());
                if (sequence)
                    fileGenerator.addAttributes("ArrayList<" + className + ">", elementName);
                fileGenerator.addFile(className);
                System.out.println(className);
                break;
            case "xs:complexType":
                System.out.println("Complex type");
                break;
            case "xs:sequence":
                this.sequence = true;
                System.out.println("List of elements");
                break;
            case "xs:attribute":
                String type = "String";
                switch (atts.getValue("type")) {
                    case "xs:integer":
                        type = "int";
                        break;
                    case "xs:string":
                        type = "String";
                        break;
                    case "xs:float":
                        type = "float";
                        break;
                }
                fileGenerator.addAttributes(type, atts.getValue("name"));
                break;
        }
        if (qName.equals("xs:element")) {

        }
    }

    public void endElement(java.lang.String uri,
                           java.lang.String localName,
                           java.lang.String qName)
            throws SAXException {
        System.out.println("end element:" + qName);
        if (qName.equals("xs:element"))
            fileGenerator.removeFile();
    }

    public void characters(char buf[], int offset, int len) throws SAXException {
        String s = new String(buf, offset, len);
        s = s.trim();
        if (!s.equals("")) {
            System.out.println("characters:" + s);
        }
    }

    public void error(SAXParseException e) throws SAXParseException {
        throw e;
    }

    // dump warnings too
    public void warning(SAXParseException err) throws SAXParseException {
        System.out.println("** Warning" + ", line " + err.getLineNumber());
        System.out.println("   " + err.getMessage());
    }

    public static void main(String[] args) {
        if (args.length != 1) {
            System.err.println("Should receive XML file on the command line");
            System.exit(-1);
        }

        try {
            DefaultHandler handler = new XSDReader();
            SAXParserFactory parserFactory = SAXParserFactory.newInstance();
            //parserFactory.setValidating(true);
            //parserFactory.setNamespaceAware(true);
            SAXParser parser = parserFactory.newSAXParser();
            //parser.setProperty(JAXP_SCHEMA_LANGUAGE, W3C_XML_SCHEMA);
            parser.parse(new File(args[0]), handler);
        } catch (SAXParseException spe) {
            // Error generated by the parser
            System.out.println("Parsing error at line " + spe.getLineNumber());
            System.out.println(spe.getMessage());

            // Use the contained exception, if any
            Exception x = spe;
            if (spe.getException() != null) {
                x = spe.getException();
            }
            x.printStackTrace();

        } catch (SAXException se) {
            // Error generated by this application or by parser
            Exception x = se;
            if (se.getException() != null) {
                x = se.getException();
            }
            x.printStackTrace();
        } catch (ParserConfigurationException | IOException e) {
            e.printStackTrace();
        }
    }
}
